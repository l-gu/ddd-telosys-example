/*
 * Generated by Telosys ( https://www.telosys.org/ )
 * 2022-04-01 (00:02:09)
 */

package org.demo.orders.application.service.impl;

import java.util.Optional;

import javax.inject.Inject;

import org.springframework.stereotype.Component;

import org.demo.orders.domain.model.Order;
import org.demo.orders.domain.model.OrderFactoryRestDto;
import org.demo.orders.domain.repository.OrderRepository;
import org.demo.orders.application.exception.OrderException;
import org.demo.orders.application.exception.ErrorCode;
import org.demo.orders.rest.dto.OrderRestDto;

/**
 * Service for "COMMANDS" (database write operations)
 * Entity Order
 *
 * @author @{AUTHOR}
 */
@Component
public class OrderCommandService {

	@Inject
	private OrderRepository orderRepository;
	

	/**
	 * Insert a new Order 
	 * @param orderRestDto Data Transfer Object
	 * @return created aggregate
	 */
	public Order insertOrder(OrderRestDto orderRestDto) {
		Order order = OrderFactoryRestDto.createOrder(orderRestDto);
		orderRepository.insert(order);
		return order;
	}

	/**
	 * Delete Order with the given id
	 * @param orderNo id
	 */
	public void deleteOrder(Integer orderNo) {  

		Optional<Order> order = orderRepository.findById(orderNo);

		if (order.isPresent()) {
			orderRepository.delete(order.get());
		} else {
			throw new OrderException(ErrorCode.DELETE_NOT_FOUND); 
		}
	}
	
	/**
	 * Save Order (update or create)
	 * @param orderNo id
	 * @param orderRestDto Data Transfer Object
	 * @return true if created (else false)
	 */
	public boolean saveOrder(Integer orderNo, OrderRestDto orderRestDto) {
		Order order = OrderFactoryRestDto.createOrder(orderRestDto);
		Order current = orderRepository.findById(orderNo).orElse(null);
		if (current == null) {
			// currentEntity not found => create a new one
			orderRepository.insert(order);
			return true;
		}
		else {
			// currentEntity found => update from given data
			update(current, order);
			return false;
		}
	}

    private void update(Order currentEntity, Order newEntity) {

		//--- You can update partially the existing entity
		// Call here specific update methods
		//// currentEntity.doSomething(newEntity.getXxx(), newEntity.getYyy());
		// Update
		//// orderRepository.update(currentEntity);

		//--- You can also just update the entity using the new one
		orderRepository.update(newEntity);		
    }
}
