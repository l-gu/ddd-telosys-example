/*
 * Generated by Telosys ( https://www.telosys.org/ )
 * 2022-03-31 (18:12:14)
 */
package org.demo.orders.infra.mybatis.common;

import java.util.List;
import java.util.Optional;

import org.demo.orders.domain.common.AggregateRoot;
import org.demo.orders.domain.common.AggregateRootRepository;

public abstract class SqlRepository<T extends AggregateRoot, ID>
		implements AggregateRootRepository<T, ID> {

	/**
	 * Provides the JDBC mapper for the current aggregate root class 
	 * @return
	 */
	protected abstract SqlMapper<T, ID> getSqlMapper();

	/**
	 * Deletes all the relationships for the given entity
	 * @param entity
	 */
	protected abstract void deleteRelationship(final T entity);

	/**
	 * Creates all the relationships for the given entity
	 * @param entity
	 */
	protected abstract void insertRelationship(final T entity);

	@Override
	public Optional<T> findById(ID id) {
		return Optional.ofNullable(getSqlMapper().findById(id));
	}

	@Override
	public List<T> findAll(Integer page, Integer size, String sort, String order) {
		return getSqlMapper().findAll(page * size, size, sort, order);
	}

	@Override
	public long count() {
		return getSqlMapper().count();
	}

	@Override
	public int insert(final T entity) {
		int r = getSqlMapper().insert(entity);
		if ( r > 0 ) {
			insertRelationship(entity);
		}
		return r;
	}

	@Override
	public int update(final T entity) {
		int r = getSqlMapper().update(entity);
		if ( r > 0 ) {
			deleteRelationship(entity);
			insertRelationship(entity);
		}
		return r;
	}

	@Override
	public int delete(final T entity) {
		deleteRelationship(entity);
		return getSqlMapper().delete(entity);
	}

}
