/*
 * Generated by Telosys ( https://www.telosys.org/ )
 * 2022-03-31 (23:44:54)
 */
package org.demo.orders.domain.model;

import java.util.ArrayList;
import java.util.List;
import org.demo.orders.rest.dto.OrderRestDto;
import org.demo.orders.rest.dto.OrderItemRestDto;
import org.demo.orders.rest.dto.DeliveryAddressRestDto;
/**
 * Domain factory for aggregate "Order" based 
 * based on REST DTO input
 *
 * @author Telosys
 *
 */

//-----------------------------------
// referencedEntitiesForAllLevels : 
// - OrderItem 
// - DeliveryAddress 
//-----------------------------------
// 
public final class OrderFactoryRestDto {


	/**
	 * Create a new instance of "Order" from "Data Transfer Object"
	 * @param dto
	 * @return created instance
	 */

	public static Order createOrder(OrderRestDto dto) {
		if (dto == null) {
			throw new IllegalArgumentException("OrderRestDto is null");
		}
		Order order = new Order();
		order.setOrderNo(dto.getOrderNo());
		order.setOrderDate(dto.getOrderDate());
		order.setStatus(dto.getStatus());
		order.setComment(dto.getComment());
		order.setCustomerId(dto.getCustomerId());
		return order;
	}

// - OrderItem 
	private static OrderItem createOrderItem(OrderItemRestDto dto) {
		if (dto == null) {
			throw new IllegalArgumentException("OrderItemRestDto is null");
		}
		OrderItem orderItem = new OrderItem();
		orderItem.setId(dto.getId());
		orderItem.setOrderNo(dto.getOrderNo());
		orderItem.setProductCode(dto.getProductCode());
		orderItem.setQuantity(dto.getQuantity());
		orderItem.setUnitPrice(dto.getUnitPrice());
		orderItem.setDiscount(dto.getDiscount());
		orderItem.setComment(dto.getComment());
		return orderItem;
	}
	private static List<OrderItem> createOrderItemList(List<OrderItemRestDto> dtoList) {
		List<OrderItem> list = null;
		if (dtoList != null) {
			list = new ArrayList<OrderItem>();
			for ( OrderItemRestDto dto : dtoList ) {
				list.add(createOrderItem(dto));
			}
		}
		return list;
	}
// - DeliveryAddress 
	private static DeliveryAddress createDeliveryAddress(DeliveryAddressRestDto dto) {
		if (dto == null) {
			throw new IllegalArgumentException("DeliveryAddressRestDto is null");
		}
		DeliveryAddress deliveryAddress = new DeliveryAddress();
		deliveryAddress.setId(dto.getId());
		deliveryAddress.setOrderNo(dto.getOrderNo());
		deliveryAddress.setStreet(dto.getStreet());
		deliveryAddress.setComplement(dto.getComplement());
		deliveryAddress.setZipCode(dto.getZipCode());
		deliveryAddress.setCity(dto.getCity());
		deliveryAddress.setState(dto.getState());
		return deliveryAddress;
	}
	private static List<DeliveryAddress> createDeliveryAddressList(List<DeliveryAddressRestDto> dtoList) {
		List<DeliveryAddress> list = null;
		if (dtoList != null) {
			list = new ArrayList<DeliveryAddress>();
			for ( DeliveryAddressRestDto dto : dtoList ) {
				list.add(createDeliveryAddress(dto));
			}
		}
		return list;
	}

}
